
# hhemm_system.py â€” Unified HHEMM Dashboard + Scoring + Slate + Preprocessing System

import pandas as pd
import numpy as np
import requests
from sklearn.preprocessing import MinMaxScaler
import streamlit as st

# ----------------------------------------------
# 1. SLATE FETCHING
# ----------------------------------------------
def get_mlb_schedule(date='2025-06-13'):
    url = f"https://statsapi.mlb.com/api/v1/schedule?sportId=1&date={date}"
    response = requests.get(url)
    data = response.json()
    games = []
    for date_info in data['dates']:
        for game in date_info['games']:
            game_info = {
                "Game": f"{game['teams']['away']['team']['name']} @ {game['teams']['home']['team']['name']}",
                "GameDate": game['gameDate'],
                "HomeTeam": game['teams']['home']['team']['name'],
                "AwayTeam": game['teams']['away']['team']['name'],
                "Venue": game['venue']['name'],
                "GamePk": game['gamePk'],
                "HomePitcher": game['teams']['home'].get('probablePitcher', {}).get('fullName'),
                "AwayPitcher": game['teams']['away'].get('probablePitcher', {}).get('fullName')
            }
            games.append(game_info)
    return pd.DataFrame(games)

# ----------------------------------------------
# 2. HHEMM SCORING LOGIC
# ----------------------------------------------
def score_hitters(df):
    df = df.copy()
    features = [
        'xba', 'xslg', 'xwoba', 'exit_velocity_avg', 'sweet_spot_percent',
        'hard_hit_percent', 'k_percent', 'bb_percent', 'z_swing_percent',
        'z_swing_miss_percent', 'iz_contact_percent', 'whiff_percent',
        'f_strike_percent', 'sprint_speed', 'avg_best_speed'
    ]
    df[features] = df[features].fillna(df[features].median())
    scaler = MinMaxScaler()
    normalized = scaler.fit_transform(df[features])
    weights = {
        'xba': 0.10, 'xslg': 0.10, 'xwoba': 0.12, 'exit_velocity_avg': 0.10,
        'sweet_spot_percent': 0.07, 'hard_hit_percent': 0.08, 'k_percent': -0.08,
        'bb_percent': 0.06, 'z_swing_percent': 0.05, 'z_swing_miss_percent': -0.06,
        'iz_contact_percent': 0.06, 'whiff_percent': -0.06, 'f_strike_percent': -0.03,
        'sprint_speed': 0.05, 'avg_best_speed': 0.04
    }
    weight_vector = np.array([weights[f] for f in features])
    df['HHEMM_Score'] = np.dot(normalized, weight_vector)
    return df.sort_values(by='HHEMM_Score', ascending=False)

# ----------------------------------------------
# 3. STREAMLIT DASHBOARD
# ----------------------------------------------
def run_dashboard():
    st.set_page_config(page_title="HHEMM Unified App", layout="wide")
    st.title("ðŸ“Š HHEMM - Unified Scouting & Slate Analysis Tool")

    tab1, tab2 = st.tabs(["ðŸ“‚ Upload & Score Hitters", "âš¾ View Tomorrow's Slate"])

    with tab1:
        uploaded = st.file_uploader("Upload Statcast CSV with hitter metrics", type="csv")
        if uploaded:
            df = pd.read_csv(uploaded)
            st.subheader("Raw Data")
            st.dataframe(df.head())
            st.subheader("Running HHEMM Scoring...")
            results = score_hitters(df)
            st.success(f"Top {len(results)} hitters scored.")
            st.dataframe(results[['last_name, first_name', 'player_id', 'HHEMM_Score']].head(25))
            st.download_button("â¬‡ Download Scored CSV", results.to_csv(index=False), "hhemm_scored.csv")

    with tab2:
        st.markdown("Fetch MLB matchups and probable pitchers.")
        date = st.date_input("Select date", value=pd.to_datetime("2025-06-13"))
        if st.button("Fetch Slate"):
            try:
                slate = get_mlb_schedule(str(date))
                st.dataframe(slate)
            except Exception as e:
                st.error(f"Error fetching schedule: {e}")

# ----------------------------------------------
# 4. MAIN ENTRY POINT
# ----------------------------------------------
if __name__ == "__main__":
    run_dashboard()
